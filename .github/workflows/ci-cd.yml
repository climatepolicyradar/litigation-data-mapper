name: CI/CD

on:
  push:
    tags: [v*]
    branches:
      - main
  pull_request:
    # By default, a workflow only runs when a pull_request event's activity type is opened,
    # synchronize, or reopened.
    types: [opened, synchronize, reopened, edited]
    branches:
      - main

permissions: read-all

jobs:
  code-quality:
    if: |
      ! cancelled() && always() &&
      ! startsWith(github.ref, 'refs/tags')
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: pyproject.toml

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install dependencies
        run: |
          export UV_PROJECT_ENVIRONMENT="${pythonLocation}"
          uv sync --frozen --no-cache

      - name: Export PYTHONPATH
        run: echo "PYTHONPATH=$(pwd)" >> $GITHUB_ENV

      - name: Check code contains no FIXME's
        run: |
          git grep -r --no-color --line-number -e "FIXME" :^.github
          if [[ $? -eq 0 ]]; then
            # if we found any FIXME entries in checked in files, fail on main
            exit 1
          else
            exit 0
          fi
        shell: bash {0}

      - name: Trunk Check
        uses: trunk-io/trunk-action@v1
        with:
          arguments: --ci

  test:
    if: |
      ! cancelled() && always() &&
      ! startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    steps:
      - name: Install latest Docker Compose
        uses: ndeloof/install-compose-action@v0.0.1
        with:
          legacy: false

      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: 0.6.16

      - name: Install dependencies
        run: |
          export UV_PROJECT_ENVIRONMENT="${pythonLocation}"
          uv sync --frozen --no-cache

      - name: Export PYTHONPATH
        run: echo "PYTHONPATH=$(pwd)" >> $GITHUB_ENV

      - name: List installed packages
        run: python -m pip list

      - name: Run Tests
        run: uv run pytest -vvv

  build:
    if: |
      ! cancelled() && always() && github.ref == 'refs/heads/main' &&
      ! startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    permissions: write-all # Required for creating a release
    needs:
      - code-quality
      - test
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: 0.6.16

      - name: Install dependencies
        run: |
          export UV_PROJECT_ENVIRONMENT="${pythonLocation}"
          uv sync --frozen --no-cache

      - name: Build service
        run: make build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Publish image to ECR
        id: retag_and_push_to_ecr
        uses: climatepolicyradar/retag-and-push-to-ecr@v1
        env:
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          repo-name: litigation-data-mapper
          semver-tag: latest

      - name: Deploy to Prefect
        env:
          AWS_ENV: prod
          AWS_REGION: eu-west-1
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          DOCKER_REPOSITORY: litigation-data-mapper
          DOCKER_TAG: latest
          PREFECT_API_KEY: ${{ secrets.PREFECT_API_KEY }}
          PREFECT_API_URL: ${{ secrets.PREFECT_API_URL }}
        run: uv run python create_deployment.py
