name: CI/CD

on:
  push:
    tags: [v*]
    branches:
      - main
  pull_request:
    # By default, a workflow only runs when a pull_request event's activity type is opened,
    # synchronize, or reopened.
    types: [opened, synchronize, reopened, edited]
    branches:
      - main

permissions: read-all

jobs:
  check-auto-tagging-will-work:
    if: |
      github.event_name == 'pull_request' &&
      (! startsWith(github.ref, 'refs/tags') && ! startsWith(github.ref, 'refs/heads/main'))
    uses: climatepolicyradar/reusable-workflows/.github/workflows/check-auto-tagging-will-work.yml@v12

  code-quality:
    if: |
      ! cancelled() && always() &&
      (needs.check-auto-tagging-will-work.result == 'skipped' || needs.check-auto-tagging-will-work.result == 'success') &&
      ! startsWith(github.ref, 'refs/tags')
    needs:
      - check-auto-tagging-will-work
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: 0.6.16

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: pyproject.toml

      - name: Export PYTHONPATH
        run: echo "PYTHONPATH=${PYTHONPATH}:${pythonLocation}/lib/python3.10/site-packages:$(pwd)" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          export UV_PROJECT_ENVIRONMENT="${pythonLocation}"
          uv sync --all-groups --frozen --no-cache
          uv pip list

      - name: Debug Python environment
        run: |
          echo "Python Environment Debugging"
          python -c "import sys; print('sys.path:', sys.path)"
          python -c "import uv; print('uv location:', uv.__file__)"
          python -c "import pyright; print('pyright location:', pyright.__file__)"
          env | grep PYTHON

      - name: Check pyproject.toml package version matches
        uses: climatepolicyradar/check-pyproject-package-version@v4

      - name: Check code contains no FIXME's
        run: |
          git grep -r --no-color --line-number -e "FIXME" :^.github
          if [[ $? -eq 0 ]]; then
            # if we found any FIXME entries in checked in files, fail on main
            exit 1
          else
            exit 0
          fi
        shell: bash {0}

      - name: Trunk Check
        uses: trunk-io/trunk-action@v1
        with:
          arguments: --ci

  test:
    if: |
      ! cancelled() && always() &&
      (needs.check-auto-tagging-will-work.result == 'skipped' || needs.check-auto-tagging-will-work.result == 'success') &&
      ! startsWith(github.ref, 'refs/tags')
    needs:
      - check-auto-tagging-will-work
    runs-on: ubuntu-latest
    steps:
      - name: Install latest Docker Compose
        uses: ndeloof/install-compose-action@v0.0.1
        with:
          legacy: false

      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install uv --no-cache-dir uv==0.6.16
          uv sync --all-groups --frozen

      - name: Export PYTHONPATH
        run: echo "PYTHONPATH=$(pwd)" >> $GITHUB_ENV

      - name: Run Tests
        run: uv run pytest -vvv

  git:
    if: |
      ! cancelled() && always() &&
      (needs.check-auto-tagging-will-work.result == 'skipped' || needs.check-auto-tagging-will-work.result == 'success') &&
      (needs.code-quality.result == 'success' && needs.test.result == 'success') &&
      ! startsWith(github.ref, 'refs/tags')
    needs:
      - check-auto-tagging-will-work
      - code-quality
      - test
    permissions: write-all
    uses: climatepolicyradar/reusable-workflows/.github/workflows/git.yml@v15
    secrets: inherit

  build:
    if: |
      ! cancelled() && always() && github.ref == 'refs/heads/main' &&(needs.git.result == 'success') && needs.git.outputs.new_tag != 'Skip' &&
      ! startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs:
      - git
    permissions: write-all # Required for creating a release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install uv
          uv sync --frozen

      - name: Build service
        run: make build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Publish image to ECR
        id: retag_and_push_to_ecr
        uses: climatepolicyradar/retag-and-push-to-ecr@v1
        env:
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          repo-name: litigation-data-mapper
          semver-tag: latest

      - name: Deploy to Prefect
        env:
          AWS_ENV: prod
          AWS_REGION: eu-west-1
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          DOCKER_REPOSITORY: litigation-data-mapper
          DOCKER_TAG: latest
          PREFECT_API_KEY: ${{ secrets.PREFECT_API_KEY }}
          PREFECT_API_URL: ${{ secrets.PREFECT_API_URL }}
        run: uv run python create_deployment.py
