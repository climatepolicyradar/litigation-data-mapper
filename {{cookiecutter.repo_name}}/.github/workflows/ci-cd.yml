name: CI/CD

on:
  push:
    tags: [v*]
    branches:
      - main
  pull_request:
    # By default, a workflow only runs when a pull_request event's activity type is opened,
    # synchronize, or reopened.
    types: [opened, synchronize, reopened, edited]
    branches:
      - main

permissions: read-all

jobs:
  check-auto-tagging-will-work:
    if: |
      github.event_name == 'pull_request' &&
      (! startsWith(github.ref, 'refs/tags') && ! startsWith(github.ref, 'refs/heads/main'))
    uses: climatepolicyradar/reusable-workflows/.github/workflows/check-auto-tagging-will-work.yml@v12

  code-quality:
    if: |
      ! cancelled() && always() &&
      (needs.check-auto-tagging-will-work.result == 'skipped' || needs.check-auto-tagging-will-work.result == 'success') &&
      ! startsWith(github.ref, 'refs/tags')
    needs:
      - check-auto-tagging-will-work
    permissions: write-all
    uses: climatepolicyradar/reusable-workflows/.github/workflows/python-precommit-validator.yml@v13
    with:
      python-version: "3.10"

  test:
    if: |
      ! cancelled() && always() &&
      (needs.check-auto-tagging-will-work.result == 'skipped' || needs.check-auto-tagging-will-work.result == 'success') &&
      ! startsWith(github.ref, 'refs/tags')
    needs:
      - check-auto-tagging-will-work
    runs-on: ubuntu-latest
    steps:
      - name: Install latest Docker Compose
        uses: ndeloof/install-compose-action@v0.0.1
        with:
          legacy: false

      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install "poetry==1.7.1"
          poetry config virtualenvs.prefer-active-python true
          poetry config virtualenvs.create true
          poetry install --only-root
          poetry install --with dev --no-cache

      - name: Export PYTHONPATH
        run: echo "PYTHONPATH=$(pwd)" >> $GITHUB_ENV

      - name: Run Tests
        run: echo TODO-TODO-TODO-TODO-TODO-TODO-TODO-TODO-TODO-TODO-TODO-TODO

  git:
    if: |
      ! cancelled() && always() &&
      (needs.check-auto-tagging-will-work.result == 'skipped' || needs.check-auto-tagging-will-work.result == 'success') &&
      (needs.code-quality.result == 'success' && needs.test.result == 'success') &&
      ! startsWith(github.ref, 'refs/tags')
    needs:
      - check-auto-tagging-will-work
      - code-quality
      - test
    permissions: write-all
    uses: climatepolicyradar/reusable-workflows/.github/workflows/git.yml@v15
    secrets: inherit

  build:
    if: |
      ! cancelled() && always() && github.ref == 'refs/heads/main' &&(needs.git.result == 'success') && needs.git.outputs.new_tag != 'Skip' &&
      ! startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs:
      - git
    permissions: write-all # Required for creating a release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install "poetry==1.7.1"
          poetry config virtualenvs.create false
          poetry install --no-cache
          poetry install --only-root --no-interaction --no-ansi

      - name: Build the package
        run: poetry build

      - name: Extract version
        id: get_version
        run: echo "VERSION=$(poetry version -s)" >> $GITHUB_ENV

      - name: Upload Wheel Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: secrets.GITHUB_TOKEN
        with:
          upload_url: needs.git.outputs.upload_url
          asset_name: "{{cookiecutter.project_slug}}-env.VERSION-py3-none-any.whl"
          asset_path: dist/{{cookiecutter.project_slug}}-env.VERSION-py3-none-any.whl
          asset_content_type: application/zip

      - name: Upload Source Distribution Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: secrets.GITHUB_TOKEN
        with:
          upload_url: needs.git.outputs.upload_url
          asset_name: "{{cookiecutter.project_slug}}-env.VERSION.tar.gz"
          asset_path: dist/{{cookiecutter.project_slug}}-env.VERSION.tar.gz
          asset_content_type: application/gzip
